{"version":3,"sources":["fruits-watermelon.gif","incursionCard/components/constellationItem.js","incursionCard/components/solarSystemItem.js","incursionCard/components/influenceItem.js","incursionCard/components/infestedSystemsItem.js","incursionCard/components/mobilizingItem.js","incursionCard/components/bossItem.js","incursionCard/incursionCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ConstellationComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","bind","assertThisInitialized","state","_this2","axios","get","concat","constellationId","then","res","setState","constellationName","data","name","regionId","region_id","regionName","undefined","react_default","a","createElement","className","title","href","split","join","Component","SolarSystemItem","solarSystemId","stagingSolarSystem","securityStatus","security_status","colorText","realSecurityStatus","Math","round","console","log","helpText","titleText","InfluenceItem","influenceValue","barColor","reactstrap_es","value","color","SCROLLABLE_LISTGROUPITEM","maxHeight","overflow","InfestedSystemsItem","infestedSystems","systems","map","item","solarSystemItem_SolarSystemItem","style","MobilizingItem","INCURSIONSTATES","mobilizing","id","established","withdrawing","incursionState","BossItem","friendlyDisplayText","textColor","hasBoss","displayClassName","IncursionCard","incursion","has_boss","constellationItem_ConstellationComponent","constellation_id","mobilizingItem_MobilizingItem","influenceItem_InfluenceItem","influence","staging_solar_system_id","bossItem_BossItem","infestedSystemsItem_InfestedSystemsItem","infested_solar_systems","App","incs","getWholeIncursions","catch","err","rawIncs","inc","xs","lg","incursionCard","chunk","row","random","length","src","loader","alt","class","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc34755f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fruits-watermelon.147c9232.gif\";","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class ConstellationComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.state = {}\n  }\n\n  componentDidMount() {\n    axios\n      .get(`https://esi.evetech.net/latest/universe/constellations/${this.props.constellationId}`)\n      .then(res => {\n        this.setState({\n          constellationName: res.data.name,\n          regionId: res.data.region_id\n        });\n        return axios.get(`https://esi.evetech.net/latest/universe/regions/${res.data.region_id}`)\n      })\n      .then(res => {\n        this.setState({\n          regionName: res.data.name\n        })\n      })\n      .then(() => {\n      })\n  }\n\n  render() {\n    if(this.state.regionName === undefined) {\n      return (\n        <div>\n          LOADING....\n        </div>\n      )\n    } else {\n        return (\n          <div className=\"text-center\">\n              <a \n                className=\"\" \n                title=\"The constellation where the incursion is happening.\"\n                href={`https://evemaps.dotlan.net/map/${this.state.regionName}/${this.state.constellationName}`}\n              >\n                <h3 className=\"\">{this.state.constellationName}</h3>\n              </a>\n              <a \n                className=\"\"\n                title=\"The region that the constellation belongs to.\"\n                href={`https://evemaps.dotlan.net/map/${this.state.regionName.split(' ').join('_')}`} \n              >\n                <h4>({this.state.regionName})</h4>\n              </a>\n          </div>\n        )\n      }\n\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nexport default class SolarSystemItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    axios\n      .get(`https://esi.evetech.net/latest/universe/systems/${this.props.solarSystemId}`)\n      .then(res => {\n        this.setState({\n          stagingSolarSystem: res.data.name,\n          securityStatus: res.data.security_status});\n      })\n  }\n\n  render() {\n    let colorText = '';\n\n    // NOTE: this is just to match the way sec status displayed in-game\n    let realSecurityStatus = Math.round(this.state.securityStatus * 10) / 10;\n    if (realSecurityStatus === 0) {\n      console.log(`null sec system detected: ${this.state.stagingSolarSystem}`)\n      realSecurityStatus = '0.0'\n    }\n    if (realSecurityStatus >= 0.5) {\n      console.log(`high sec system detected: ${this.state.stagingSolarSystem}`)\n      colorText = 'text-success';\n    }\n    else if (realSecurityStatus > 0.0 && realSecurityStatus <= 0.4) {\n      console.log(`low sec system detected: ${this.state.stagingSolarSystem}`)\n      colorText = 'text-warning';\n    }\n    else if (realSecurityStatus <= 0.0) {\n      console.log(`high sec system detected: ${this.state.stagingSolarSystem}`)\n      colorText = 'text-danger'\n    }\n\n    return (\n      <div \n        className=\"my-2\"\n        title={`${this.props.helpText}`}\n      >\n        <p className=\"float-left\">{this.props.titleText}</p>\n        <a className=\"float-right\" href={`https://evemaps.dotlan.net/system/${this.state.stagingSolarSystem}`}>\n          <p className={colorText}>{this.state.stagingSolarSystem} ({realSecurityStatus})</p>\n        </a> \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Progress,\n} from 'reactstrap';\n\nexport default class InfluenceItem extends Component {\n\n  render() {\n    let influenceValue = Math.round(this.props.influenceValue) * 100;\n    let barColor = '';\n    if (influenceValue === 0) {\n      barColor = 'success';\n    } else if (influenceValue === 100) {\n      barColor = 'danger';\n    } else {\n      barColor = 'warning';\n    }\n    return (\n      <div \n        className=\"text-center\"\n        title=\"\n          The level of influence the incursion has on the constellation. \n          This affects the severity of system-wide incursion penalties.\n          Lower influence rating == lower penalties.\"\n      >\n          <div>Influence @ {influenceValue}%</div>\n          <Progress value={influenceValue} color={barColor}></Progress>\n      </div>\n    )\n  }\n\n}\n","import React, { Component } from 'react';\nimport {\n  ListGroup,\n  ListGroupItem\n} from 'reactstrap';\n\nimport SolarSystemItem from './solarSystemItem';\n\nconst SCROLLABLE_LISTGROUPITEM = {\n  maxHeight: '200px',\n  overflow: 'scroll'\n}\n\nexport default class InfestedSystemsItem extends Component {\n  render() {\n    console.log(this.props.infestedSystems);\n    let systems = this.props.infestedSystems.map(item => {\n      return <SolarSystemItem solarSystemId={item} helpText=\"Solar systems affected by incursion penalties.\"/>\n    })\n    return (\n      <div>\n        <ListGroupItem \n          style={SCROLLABLE_LISTGROUPITEM} \n        >\n          <p>Infested Solar Systems:</p>\n          <ListGroup className=\"mt-3\">\n            {systems}\n          </ListGroup>\n        </ListGroupItem>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Alert,\n} from 'reactstrap';\n\n\n\nexport default class MobilizingItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.INCURSIONSTATES = {\n      'mobilizing': \n        <Alert \n          color=\"warning\" \n          className=\"text-center\" \n          id=\"mobilizationStatus\"\n        >\n          MOBILIZING\n        </Alert>,\n      'established': \n        <Alert \n          color=\"success\" \n          className=\"text-center\" \n          id=\"mobilizationStatus\"\n        >\n          ESTABLISHED\n        </Alert>,\n      'withdrawing': \n        <Alert \n          color=\"danger\" \n          className=\"text-center\" \n          id=\"mobilizationStatus\"\n        >\n          WITHDRAWING\n        </Alert>\n    }\n\n  }\n\n  render() {\n    return (\n      <div\n        title=\"Whether the incursion has just started (Mobilizing), is in progress (Established), or coming to an end (Withdrawing)\">\n          {\n            this.INCURSIONSTATES[this.props.incursionState]\n          }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class BossItem extends Component {\n  render() {\n    let friendlyDisplayText = '';\n    let textColor = '';\n    if (this.props.hasBoss === true) {\n      friendlyDisplayText = 'Yes';\n      textColor = 'text-success'\n    } else {\n      friendlyDisplayText = 'No';\n      textColor = 'text-danger'\n    }\n\n    // NOTE: getting errors when I shove it into the return div down below.\n    //       so I'm putting it up here.\n    let displayClassName = `float-right ${textColor}`;\n\n    return (\n      <div \n        className=\"my-1\"\n        title=\"Has the boss site spawned yet?\"\n      >\n        <p className=\"float-left\">Has Boss?</p>\n        <p className={displayClassName}>{friendlyDisplayText}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { \n  Card, \n  CardText, \n  CardBody, \n  ListGroup, \n} from 'reactstrap';\n\nimport ConstellationItem from './components/constellationItem';\nimport SolarSystemItem from './components/solarSystemItem';\nimport InfluenceItem from './components/influenceItem';\nimport InfestedSystemsItem from './components/infestedSystemsItem';\nimport MobilizingItem from './components/mobilizingItem';\nimport BossItem from './components/bossItem';\n\nclass IncursionCard extends Component {\n  render() {\n    console.log(`${this.props.incursion.has_boss}`);\n    return (\n      <div>\n        <Card className='my-2'>\n          <CardBody>\n            <CardText>\n              <ListGroup>\n                <ConstellationItem \n                  constellationId={this.props.incursion.constellation_id}>\n                </ConstellationItem>\n                <MobilizingItem\n                  incursionState={this.props.incursion.state}>\n                </MobilizingItem>\n                <InfluenceItem \n                  influenceValue={this.props.incursion.influence}>\n                </InfluenceItem>\n                <SolarSystemItem \n                  solarSystemId={this.props.incursion.staging_solar_system_id}\n                  titleText=\"Staging System: \"\n                  helpText=\"The solar system the incursion is staging out of.\">\n                </SolarSystemItem>\n                <BossItem\n                  hasBoss={this.props.incursion.has_boss}>\n                </BossItem>\n                <InfestedSystemsItem \n                  infestedSystems={this.props.incursion.infested_solar_systems}>\n                </InfestedSystemsItem>\n              </ListGroup>\n            </CardText>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default IncursionCard;\n","import React, { Component } from 'react';\nimport IncursionCard from './incursionCard/incursionCard';\nimport axios from 'axios';\nimport chunk from 'lodash.chunk';\n\nimport { Row, Col } from 'reactstrap';\n\nimport loader from './fruits-watermelon.gif';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.incs = [];\n\n    this.getWholeIncursions = this.getWholeIncursions.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this)\n  }\n\n  getWholeIncursions() {\n    return axios\n      .get('https://esi.evetech.net/latest/incursions/')\n      .then(res => {\n        return res.data;\n      })\n      .catch(err => {\n        console.log(`error fetching incursions: ${err}`);\n      });\n  }\n\n  componentDidMount() {\n    // NOTE: I'm really not happy with this particular bit of code\n    //       it seems like a shitty, hacky way to turn an asynchronous process\n    //       synchronous. But, it works. \n    let rawIncs = [];\n    this.getWholeIncursions()\n      .then(data => {\n        rawIncs = data;\n      })\n      .then(() => {\n        this.incs = rawIncs.map(inc => {\n          return (\n            <Col xs=\"12\" lg=\"4\">\n              <IncursionCard incursion={inc}/>\n            </Col>\n          )\n        })\n        this.incs = chunk(this.incs, 3)\n        this.incs = this.incs.map(row => {\n          return (\n            <Row>\n              {row}\n            </Row>)\n        })\n      })\n      .then(() => {\n        this.setState({\n          random: 'foobar'\n        })\n      })\n\n  }\n\n  render() {\n\n    if (this.incs === undefined || this.incs.length === 0) {\n      return (\n        <div className=\"m-5 text-center\">\n          <img src={loader} alt=\"\"/>\n          <p>Please enjoy this watermelon while we fetch incursion data.</p>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <div class=\"container text-center\">\n            <h1>Incursion Watch</h1>\n            <hr/>\n          </div>\n          <div className=\"text-center\">\n            <div>\n              <p>\n                Incursions in EVE Online are encounters in which \n                fleets of pilots work to drive back NPC pirate invasions in \n                across the game's universe. They represent high-end PVE content\n                and are equivalent to 'raids' in other MMOs.\n              </p> \n              <p>\n                This website is a tool designed to help EVE Online players locate\n                and track the status of Incursions within the game's universe.\n                Refresh the page to get the latest data.\n              </p>\n              <p>\n                It pulls data straight from the <a href=\"https://esi.evetech.net/\">EVE Online API</a>,\n                but certain things aren't available (like who owns null-sec sovereign space).\n                For cases like those, I link systems, regions, and constellations to their respective DOTLAN pages\n                for more info.\n              </p>\n            </div>\n            {this.incs}\n          </div>\n          <div>\n            <footer className=\"footer m-2\">\n              <div className=\"container text-center\">\n                <hr/>\n                <span className=\"text-muted d-block\">\n                  This site was built using ReactJS + bootstrap 4 \n                </span>\n                <span className=\"text-muted d-block\">\n                  (c) 2018 Enrico Tuvera Jr\n                  <a href=\"https://github.com/cornjuliox\">\n                    <i className=\"fab fa-github-square mx-1 fa-lg\"></i>\n                  </a>\n                  <a href=\"https://linkedin.com/in/enrico-jr-tuvera\">\n                    <i className=\"fab fa-linkedin mx-1 fa-lg\"></i>\n                  </a>\n                </span>\n                <span className=\"text-muted d-block\">\n                  EVE Online & the API I used here are property of CCP Games\n                </span>\n              </div>\n            </footer>\n          </div>\n        </div>\n      )\n    }\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}